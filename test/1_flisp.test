# test executable and fLisp functionality
# leg20231128: Femto
tap 31

[ -x ../femto ]
ok femto-1 femto exists and is executable;

(FEMTORC= femto >/dev/null)
ok femto-2 w/o femto.rc femto succeds silently

(: | femto >/dev/null)
ok femto-3 empty input succeeds silently

# repl
IN='(' OUT='error: unexpected end of stream in list'
flisp_expr; ok reader-1 incomplete sexp error msg

IN="'(nil 'symbol)" OUT='(nil (quote symbol))'
flisp_expr; ok reader-2 read "'" ok, writer succeeds

# Special forms
IN='(quote)' OUT='error: #<Primitive quote> expects at least 1 arguments'
flisp_expr; ok quote-1 w/o arg error message

IN="(setq var 'val)" OUT=val
flisp_expr; ok setq-1 assignment returns value

IN="(setq var 'val) var" OUT=val
flisp_expr; ok setq-2 var evaluates to val

IN='(setq)' OUT=nil
flisp_expr; ok setq-3 no args evaluate to nil

IN='(setq var1)' OUT='error: #<Primitive setq> expects a multiple of 2 arguments'
flisp_expr; ok setq-4 one arg fails

EXPR="(setq var1 'val1  var2 'val2)"
IN="$EXPR" OUT=val2
flisp_expr; ok setq-5 four args returns last value

IN="$EXPR var1" OUT=val1
flisp_expr; ok setq-6 four args first var evaluates to first value

IN="$EXPR var2" OUT=val2
flisp_expr; ok setq-7 four args second var evaluates to second value

IN='(progn)' OUT=nil
flisp_expr; ok progn-1 no args evaluate to nil

IN="(progn 'one)" OUT=one
flisp_expr; ok progn-2 one arg evaluates to arg

IN="(progn (princ 'first) 'second)" OUT=firstsecond
flisp_expr 2; ok progn-3 two args evaluate in sequence

# if <- to be moved to std
# cond
IN='(cond)'  OUT=nil
flisp_expr; ok cond-1 empty cond gives nil

IN='(cond nil)' OUT=nil
flisp_expr; ok cond-2 cond with nil gives nil

IN='(cond ())' OUT=nil
flisp_expr; ok cond-3 cond with empty list gives nil

IN='(cond ("a"))' OUT='"a"'
flisp_expr; ok cond-4 cond with single string predictate gives string

IN='(cond (0))' OUT=0
flisp_expr; ok cond-5 cond with single number predicate gives number

IN='(cond (nil))' OUT=nil
flisp_expr; ok cond-6 cond with single nil predicate gives nil

IN='(cond (t))' OUT=t
flisp_expr; ok cond-7 cond with single t predictate gives t

IN='(cond ("a" "b"))' OUT='"b"'
flisp_expr; ok cond-8 fix test, cond with two string list gives second string

IN='(cond nil (t "else"))' OUT='"else"'
flisp_expr; ok cond-9 cond with t clause

IN='(cond nil nil)' OUT=nil
flisp_expr; ok cond-10 cond with nils gives nil

IN='(cond nil ())' OUT=nil
flisp_expr; ok cond-11 cond with nil and empty list gives nil

IN='(cond nil ("a"))' OUT='"a"'
flisp_expr; ok cond-12 cond with last expresion single string list gives its value

IN="(cond nil ((consp (quote (a b)))))" OUT=t
flisp_expr; ok cond-13 cond with last expresion funcall gives result

IN='(cond . "a")' OUT='error: "a" is not a list'
flisp_expr; ok cond-14 fail if not called with a cons

IN='(cond "a" ())' OUT='error: "a" is not a list'
flisp_expr; ok cond-14 fail if clause is not a cons

IN='(cond (t . t))' OUT='error: t is not a list'
flisp_expr; ok cond-15 fail if clause action is not a cons

# lambda
# macro

# Primitives
## Write
# print
# princ

## Objects
# consp
# numberp
# stringp
# symbolp
# symbol-name
# eq

## Cons'es
# car
# cdr
# cons

## Arithmetic
# + - * / %
# = <= > >=

## Strings
# string.length
# string.append
# string.substring
# string.ref
# string->number
# number-to-string
# ascii
# ascii->number


## I/O
# signal
# exit
# os.getenv
# get-temp-file

# Text buffers
# ...


# Local Variables:
# mode: sh
# End:
