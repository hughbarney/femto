#!./run
# test the fLisp core library
# leg20231129: Femto

export FLISPRC=../lisp/core.lsp

tap 34

# list
IN='(list)' OUT=nil
flisp_expr 1; ok list-1 empty list

IN="(list 'element)" OUT='(element)'
flisp_expr 1; ok list-2 single element

IN="(list 'first 'second)" OUT='(first second)'
flisp_expr 1; ok list-3 two elements

# defmacro
IN="(defmacro m (a b) (list 'list a b)) (m 1 2)" OUT='(1 2)'
flisp_expr 1; ok defmacro-1  simple macroexpansion

# defun
IN="(defun f (a b) (list a b)) (f 1 2)" OUT='(1 2)'
flisp_expr 1; ok defun-1  simple function invocation

IN="(numberp 42)" OUT='t'
flisp_expr 1; ok numberp-1  numberp number is t

IN="(numberp numberp)" OUT='nil'
flisp_expr 1; ok numberp-2  numberp lambda is nil

IN='(stringp "answer")' OUT='t'
flisp_expr 1; ok stringp-1  stringp string is t

IN="(stringp stringp)" OUT='nil'
flisp_expr 1; ok stringp-2  stringp lambda is nil

IN="(symbolp 'a)" OUT='t'
flisp_expr 1; ok symbolp-1  symbolp symbol is t

IN="(symbolp symbolp)" OUT='nil'
flisp_expr 1; ok symbolp-2  symbolp lambda is nil

IN="(symbol-name 'a)" OUT='"a"'
flisp_expr 1; ok symbol-name-1  symbolname is symbol as string


# string
IN="(string nil)" OUT='""'
flisp_expr 1; ok string-1 nil is empty string

IN="(string +03)" OUT='"3"'
flisp_expr 1; ok string-2 number converts to number string

IN='(string "a")' OUT='"a"'
flisp_expr 1; ok string-3 string returns itself

IN="(string 'a)" OUT='"a"'
flisp_expr 1; ok string-4 symbols converts to its name

IN="(string (cons 'a  2))" OUT='"a2"'
flisp_expr 1; ok string-5 cons converts to concatenated strings of elements

IN="(string car)" OBJ='#<Primitive car>'  ERR="cannot convert to string"
flisp_err 1; ok string-6 lambda err\'s

# concat
IN="(concat 1 'a \"?\")" OUT='"1a?"'
flisp_expr 1; ok concat-1 simple string concatenation

# memq
IN="(memq 'a (list 0 'a 3))" OUT="(a 3)"
flisp_expr 1; ok memq-1 find object in list

IN='(memq '\''a '\''(1 '\''two 3))' OUT=nil
flisp_expr 1; ok memq-2 do not find object in list


IN="(defun incr (x) (+ x 1)) (map1 incr '(1 2 3))" OUT="(2 3 4)"
flisp_expr 1; ok map1-1 map1 incr elements in list

IN="(map1 / '())" OUT="nil"
flisp_expr 1; ok map1-2 map1 does nothing on empty list

# fload
IN='(setq f (open "empty.lsp" "r")) (fload f)' OUT=nil
flisp_expr 1; ok fload-1 load empty file

IN='(setq f (open "one_word.lsp" "r")) (fload f)' OUT='"one_word"'
flisp_expr 1; ok fload-2 load file with one word

# load
IN='(load "empty.lsp")' OUT=nil
flisp_expr 1; ok load-1 load empty file

IN='(load "one_word.lsp")' OUT='"one_word"'
flisp_expr 1; ok load-2 load file with one word

# provide
IN="(provide)" OUT="(nil core)"
flisp_expr 1; ok provide-1 providing nothing adds nil
IN="(provide 'a)" OUT="(a core)"
flisp_expr 1; ok provide-2 providing feature a prepends a to features
IN="(provide 'a 'b)" OUT="(a core)"
flisp_expr 1; ok provide-3 providing features a and subfeature b only prepends a to features

# require
IN="(require)" OBJ="#<Lambda (feature . args)>" ERR="(env) expects at least 1 arguments"
flisp_err 1; ok require-1 requiring nothing errs

IN="(require '_no_file)" OUT="nil"
flisp_expr 1; ok require-2 requiring not existing features returns nil

IN="(require 'core)" OUT="(core)
core"
flisp_expr 2; ok require-3 requiring existing feature returns feature

IN="(require 'flisp)" OUT="(core)
flisp"
flisp_expr 2; ok require-4 requiring new feature returns feature


# Local Variables:
# mode: sh
# End:
