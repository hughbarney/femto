# test the fLisp library
# leg20231129: Femto
tap 42

load_flisp() {
    IN=$(cat <<EOF
(load "../femto.rc")
(require 'flisp)
$IN
EOF
      )
}
flisp() { load_flisp; flisp_expr $1; }
flisp_fail() { load_flisp; flisp_err $1; }

# backwards compatible functions should vanish
false; ok refactor backward compatible defuns \# TODO

# null
IN='(null nil)' OUT=t
flisp; ok null-1 nil is null

IN="(null t)" OUT=nil
flisp; ok null-2 t is not null

IN="(null 'symbol)" OUT=nil
flisp; ok null-3 symbol is not null

IN="(null (cons nil nil))" OUT=nil
flisp; ok null-3 cons is not null

# not
true; ok not \# Skip not is null

# listp
IN='(listp nil)' OUT=t
flisp; ok listp-1 nil is list

IN='(listp t)' OUT=nil
flisp; ok listp-2 constant is not list

IN="(listp '())" OUT=t
flisp; ok listp-3 single element list is list

IN="(listp '(a 0))" OUT=t
flisp; ok listp-4 two element list is list

# and
IN='(and)' OUT=t
flisp; ok and-1  no args is t

IN='(and t)' OUT=t
flisp; ok and-2  t is t

IN='(and nil)' OUT=nil
flisp; ok and-3  nil is nil

IN='(and t nil)' OUT=nil
flisp; ok and-4  t nil is nil

IN='(and nil t)' OUT=nil
flisp; ok and-5  nil t is nil

IN='(and nil nil)' OUT=nil
flisp; ok and-6  nil nil is nil

IN='(and t t)' OUT=t
flisp; ok and-7 t t is t

IN='(and "a")' OUT='"a"'
flisp; ok and-8 single not nil is itself

IN='(and t "a")' OUT='"a"'
flisp; ok and-9 not nil at end is itself

IN='(and "a" 0 t)' OUT=t
flisp; ok and-10 triple t is true


false; ok \# TODO map1


IN='(or)' OUT=nil
flisp; ok or-1 empty or is false

IN='(or t)' OUT=t
flisp; ok or-2 t is t

IN='(or "a")' OUT='"a"'
flisp; ok or-3 not nil is itself

IN='(or t nil)' OUT=t
flisp; ok or-4 t nil is t

IN='(or nil t)' OUT=t
flisp; ok or-5 nil t is t

IN='(or nil 0)' OUT=0
flisp; ok or-6 nil not nil is itself

IN='(or nil nil nil)' OUT=nil
flisp; ok or-7 triple nil is nil

IN='(or nil nil nil "a" "b" nil)' OUT='"a"'
flisp; ok or-8 nil with not nil is first itself

false; ok reduce-1 \#TODO

IN='(max)'
OUT="error: (wrong-number-of-arguments max 0) wrong-number-of-arguments"
flisp_fail; ok max-1 with nil fails

IN='(max "a")'
OUT='error: (wrong-type-argument "not a number" "a") wrong-type-argument'
flisp_fail; ok max-2 with not number fails

IN='(max 0)' OUT=0
flisp; ok max-3 with single number yields number

IN='(max 2 1)' OUT=2
flisp; ok max-4 with 'a>b' yields a

IN='(max 1 2)' OUT=2
flisp; ok max-5 with 'a<b' yields b

IN='(max 1 2 3)' OUT=3
flisp; ok max-6 with more then two args

IN='(min)'
OUT="error: (wrong-number-of-arguments min 0) wrong-number-of-arguments"
flisp_fail; ok min-1 with nil fails

IN='(min "a")'
OUT='error: (wrong-type-argument "not a number" "a") wrong-type-argument'
flisp_fail; ok min-2 with not number fails

IN='(min 0)' OUT=0
flisp; ok min-3 with single number yields number

IN='(min 1 2)' OUT=1
flisp; ok min-4 with 'a<b' yields a

IN='(min 2 1)' OUT=1
flisp; ok min-5 with 'a>b' yields b

IN='(min 1 2 3)' OUT=1
flisp; ok min-6 with more then two args

# Local Variables:
# mode: sh
# End:
